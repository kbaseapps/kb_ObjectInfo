# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_staging_exporter(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login',
            service_ver='release',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def export_to_staging(self, params, context=None):
        """
        export_to_staging: export large file associated with workspace object to staging area
        :param params: instance of type "ExportStagingParams" (Input of the
           export_to_staging function input_ref: workspace object reference
           workspace_name: workspace name objects to be saved to
           destination_dir: destination directory for downloaded files
           optional: generate_report: indicator for generating workspace
           report. (default False) export_genome: indicator for downloading
           Genbank (setting export_genome_genbank: 1) or GFF (setting
           export_genome_gff: 1). (default download Genbank)
           export_alignment: indicator for downloading BAM (setting
           export_alignment_bam: 1) or SAM (setting export_alignment_sam: 1).
           (default download BAM)) -> structure: parameter "input_ref" of
           type "WSRef" (Ref to a WS object @id ws), parameter
           "workspace_name" of type "workspace_name" (workspace name of the
           object), parameter "destination_dir" of String, parameter
           "generate_report" of String, parameter "export_genome" of mapping
           from String to String, parameter "export_alignment" of mapping
           from String to String
        :returns: instance of type "ExportStagingOutput" -> structure:
           parameter "report_name" of String, parameter "report_ref" of
           String, parameter "result_dir" of String
        """
        return self._client.run_job('kb_staging_exporter.export_to_staging',
                                    [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.run_job('kb_staging_exporter.status',
                                    [], self._service_ver, context)
